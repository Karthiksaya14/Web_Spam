import string
import numpy as np
import pandas as pd
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import nltk
from flask import Flask, request, render_template

# Step 1: Download NLTK Stopwords
nltk.download('stopwords')

# Step 2: Load the Dataset
# Replace 'spam_ham_dataset.csv' with your actual dataset file path.
df = pd.read_csv("spam_ham_dataset.csv")
# Adjust column names if necessary
df = df.rename(columns={'v1': 'label_num', 'v2': 'text'})
df = df[['text', 'label_num']]  # Ensure only relevant columns are used (text and label)

# Step 3: Preprocessing Function
def preprocess_text(text):
    stemmer = PorterStemmer()
    stopwords_set = set(stopwords.words('english'))
    # Convert text to lowercase
    text = text.lower()
    # Remove punctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    # Tokenize and remove stopwords
    text = [stemmer.stem(word) for word in text.split() if word not in stopwords_set]
    return ' '.join(text)

# Step 4: Apply Preprocessing
corpus = df['text'].apply(preprocess_text)

# Step 5: Vectorize the Text
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(corpus).toarray()
y = df['label_num']

# Step 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Train the Random Forest Classifier
clf = RandomForestClassifier(n_jobs=-1, random_state=42)
clf.fit(X_train, y_train)

# Step 8: Evaluate the Model
accuracy = clf.score(X_test, y_test)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Step 9: Create a Flask Web Application
app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')  # Ensure index.html exists in the templates folder

@app.route('/predict', methods=['POST'])
def predict():
    email_to_classify = request.form['email']
    email_to_classify = preprocess_text(email_to_classify)
    email_corpus = [email_to_classify]
    X_email = vectorizer.transform(email_corpus)
    prediction = clf.predict(X_email)
    result = "Spam" if prediction[0] == 1 else "Ham"
    return render_template('result.html', prediction=result)  # Ensure result.html exists in the templates folder

if __name__ == '__main__':
    app.run(debug=True)
